/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: NANOPLOT_RAW {
        publishDir = [
            path: { "${params.outdir}/nanoplot/raw" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: NANOPLOT_TRIMMED {
        publishDir = [
            path: { "${params.outdir}/nanoplot/trimmed" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }


    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: CHOPPER {
        ext.args2 = "${params.chopper_args}"
    }

    withName: CUTADAPT {
        ext.args = "-b file:${params.cutadapt_adapter_fasta} --revcomp -n 2"
    }

    withName: 'MULTIQC' {
        ext.args   = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: ALIGN_READS {
        ext.args = "${params.minimap2_args}"
    }

    withName: SAMTOOLS_STATS {
        publishDir = [
            path: { "${params.outdir}/samtools/stats" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMTOOLS_DEPTH {
        publishDir = [
            path: { "${params.outdir}/samtools/depth" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMTOOLS_COVERAGE {
        publishDir = [
            path: { "${params.outdir}/samtools/coverage" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMTOOLS_FASTQ_UNMAPPED {
        ext.args = "-n -f 4"
        publishDir = [
            path: { "${params.outdir}/samtools/unmapped" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: ALIGNMENT_CLASSIFY {
        publishDir = [
            path: { "${params.outdir}/alignment_classified" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BLAST_UNMAPPED_READS {
        publishDir = [
            path: { "${params.outdir}/blast/unmapped" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMTOOLS_SORT_INDEX {
        ext.args = "-bq ${params.mapping_quality}"
        publishDir = [
            path: { "${params.outdir}/samtools/mapped" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMTOOLS_FASTQ_MAPPED {
        ext.args = "-n"
        publishDir = [
            path: { "${params.outdir}/samtools/mapped_filtered/fastq" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: NANOPLOT_ALIGNMENT_TAXON_FILTERED {
        publishDir = [
            path: { "${params.outdir}/nanoplot/alignment_taxon_filtered" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: ALIGNMENT_CLASSIFICATION_GRAPH_READS {
        publishDir = [
            path: { "${params.outdir}/alignment_classification_graph_reads" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}


